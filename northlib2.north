global write
# string: *u8, file_desc: u64 -> byte_written: u64
fn write
	# string file_desc
	1 unrot # 1 string file_desc
	swap # 1 file_desc string
	dup # 1 file_desc string string
	strlen # 1 file_desc string strlen
	syscall
end

global open_file_writing
# filename: *u8 -> file_desc: u64
fn open_file_writing
	2 swap # 2 filename
	577 # O_WRONLY | O_CREAT | O_TRUNC
	0770 # Mode
	syscall
end

global close_file
# file_desc: u64
fn close_file
	3 swap # 3 file_desc
	0 0 # padding args
	syscall
end

# mmap only works if memory amount is a multiple of 4096 (one page),
# so this ensures it
# n: u64 -> rounded: u64
fn round_up_to_page
	dup 0b1111_1111_1111 # n n 0b1111_1111_1111
	band 0 ne # n needs_rounding_up?
	4096 mul # n correction
	swap # correction n
	0xfffffffffffff000 band # correction round(n, 4096)
	add
end

global mmap
# bytes: u64 -> addr: void*
fn mmap
	round_up_to_page # bytes
	9 swap # SYSCALL_MMAP bytes
	0 swap # SYSCALL_MMAP NULL bytes
	3 # PROT_READ | PROT_WRITE
	34 # MAP_PRIVATE | MAP_ANONYMOUS
	-1 # fd (ignored)
	0 # offset (ignored)
	syscall7
end

global munmap
# addr: void*, bytes: u64 -> status
fn munmap
	11 unrot # SYSCALL_MUNMAP addr bytes
	round_up_to_page # SYSCALL_MUNMAP addr bytes_corrected
	0 # Padding
	syscall
end

space malloc_internal 8
space free_internal 8

global malloc
fn malloc
	&malloc_internal get call
end

global free
fn free
	&free_internal get call
end

struct arena
	pointer used cap
end

# capacity -> *arena
global arena_new
fn arena_new
	local cap local pointer local arena
	!cap
	arena_size ?cap add
		mmap !arena
	?arena arena_size add !pointer

	?arena 0 arena_set_used
	?arena ?cap arena_set_cap
	?arena ?pointer arena_set_pointer

	?arena
end

# *arena -> void
global arena_destroy
fn arena_destroy
	local total_allocation local arena
	!arena

	 arena_size ?arena arena_get_cap add !total_allocation

	 ?arena ?total_allocation munmap
end

global arena_alloc
# arena: *arena, size: u64 -> void*
fn arena_alloc
	local arena local size
	!size !arena

	local arena_left
	?arena arena_get_cap ?arena arena_get_used sub !arena_left
	?size ?arena_left gt
	if
		"Not enough memory for arena allocation" panic
	end

	local result
	?arena arena_get_pointer ?arena arena_get_used add !result

	?arena
		?arena arena_get_used ?size add
			arena_set_used

	?result
end

space global_arena 8

# bytes: u64 -> void
global global_arena_allocator_start
fn global_arena_allocator_start
	local bytes
	!bytes

	&global_arena
		?bytes arena_new
			set

	&malloc_internal
		&global_arena_malloc
			set

	&free_internal
		&global_arena_free
			set
end

# size: u64 -> void*
fn global_arena_malloc
	&global_arena get # size, arena
	swap # arena, size
	arena_alloc
end

# void* -> void
fn global_arena_free
	pop
end

# void -> void
global global_arena_allocator_end
fn global_arena_allocator_end
	&global_arena get arena_destroy
end


global panic
# message: char* -> !
fn panic
	"\033[1;31mPANIC: " 2 write pop
	2 write pop
	"\033[0m\n" 2 write pop
	60 1 0 0 syscall
end

# message: char* -> void
global error
fn error
	"\033[1;31mERROR: " 2 write pop
	2 write pop
	"\033[0m\n" 2 write pop
end

global todo
fn todo
	"\033[1;35m" 2 write pop
	2 write pop
	"\033[0m\n" 2 write pop
	60 2 0 0 syscall
end

struct list
	buffer used cap element_size
end


global list_new
# element_size: u64 -> list*
fn list_new local element_size
	!element_size

	local list
	list_size malloc !list

	local buffer
	64 ?element_size mul malloc !buffer

	?list 64            list_set_cap
	?list 0             list_set_used
	?list ?element_size list_set_element_size
	?list ?buffer       list_set_buffer

	?list
end

global list_destroy
# list* -> void
fn list_destroy local list
	!list

	?list list_get_buffer free
	?list free
end

global list_push_new
# list* -> list_element*
fn list_push_new local list
	!list

	?list list_get_used ?list list_get_cap eq
	if
		?list list_grow
	end

	local pointer
	?list list_get_used ?list list_get_element_size mul
		?list list_get_buffer add
			!pointer

	?list
		?list list_get_used 1 add
			list_set_used

	?pointer
end

# list* -> void
global list_grow
fn list_grow local list
	!list

	local bytes
	?list list_get_element_size ?list list_get_used mul
		!bytes

	?list
		?list list_get_cap 2 mul
			list_set_cap

	local new_buffer
	?bytes 2 mul malloc !new_buffer

	?new_buffer ?list list_get_buffer ?bytes memcpy

	?list list_get_buffer free
	?list ?new_buffer list_set_buffer
end

global memcpy
# dest: u8*, src: u8*, size: u64 -> void
fn memcpy local dest local src local size
	!size !src !dest

	local i
	0 !i

	local byte

	loop
		?i ?size ge if break end

		?src ?i add get_byte !byte
		?dest ?i add ?byte set_byte

		?i 1 add !i
	end
end

global list_get
# list*, index: u64 -> element*
fn list_get local list local index
	!index !list

	?index ?list list_get_element_size mul
		?list list_get_buffer add
end
