extern global_arena_allocator_start extern global_arena_allocator_end
extern malloc extern list_new extern list_push_new extern list_get extern list_destroy extern list_used
extern string_builder_new
extern string_builder_finish
extern string_builder_push
extern read_all_to_string
extern list_grow

struct token
	type
	value
end

space tokens 8

# type: u64, value: void* -> void
fn push_token local type local value
	!value !type

	local token
	&tokens get list_push_new !token

	?token ?type  token_set_type
	?token ?value token_set_value
end

space input  8
space index  8
space length 8

fn NUMBER 10  end
fn STRING 11  end
fn IDENT  12  end
fn IF     101 end # keywords > 100
fn ELSEIF 102 end
fn ELSE   103 end
fn LOOP   104 end

# void -> char
fn peek_char
	&index get &length get ge if
		0 return
	end

	&input get
		&index get
			add
				get_byte
end

fn peek_2_chars
	peek_char
	consume_char peek_char

	&index
		&index get 1 sub
			set
end

# void -> void (changes index)
fn consume_char
	&index
		&index get 1 add
			set
end


# char -> bool
fn is_alpha local char
	!char

	?char 'a' ge
		?char 'z' le
			band
	?char 'A' ge
		?char 'Z' le
			band
				bor
end

# char -> bool
fn is_num local char
	!char

	?char '0' ge
		?char '9' le
			band
end

# char -> bool
fn is_whitespace local char
	!char

	?char 10 eq
		?char ' ' eq bor
			?char 9 eq bor
end

# void -> void
fn consume_whitespace
	loop
		peek_char is_whitespace not if
			break
		end
		consume_char
	end
end

# void -> void
fn consume_number
	local sign
	1 !sign

	peek_char '-' eq if
		-1 !sign
		consume_char
	end

	local num
	0 !num

	local char
	loop
		peek_char !char

		?char is_num if
			?num 10 mul !num
			?num
				?char '0' sub
					add !num
			consume_char
			continue
		end
		?char '_' eq if
			consume_char
			continue
		end
		break
	end

	?num ?sign mul
		!num

	NUMBER ?num push_token
end

# void -> void
fn consume_ident
	local builder
	string_builder_new !builder

	local char
	loop
		peek_char !char

		?char is_alpha ?char is_num bor ?char '_' eq bor if
			?builder ?char string_builder_push
			consume_char
			continue
		end
		break
	end

	local str
	?builder string_builder_finish !str

	IDENT ?str push_token
end

fn consume_string
	local builder
	string_builder_new !builder

	consume_char # skip opening quote

	local char
	loop
		peek_char !char
		consume_char

		?char '"' eq if
			break
		end
		?char '\' eq if
			peek_char !char
			consume_char

			?char 'n' eq if
				10 !char
			end

			?char 't' eq if
				9 !char
			end

			?char '0' eq if
				0 !char
			end
		end
		?builder ?char string_builder_push
	end

	local str
	?builder string_builder_finish !str

	STRING ?str push_token
end

# void -> bool
fn consume_token
	consume_whitespace

	local char local next_char
	peek_2_chars !next_char !char

	?char is_alpha if
		consume_ident
		1 return
	end
	?char is_num if
		consume_number
		1 return
	end
	?char '-' eq
		?next_char is_num
			band if
				consume_number
				1 return
	end
	?char '"' eq if
		consume_string
		1 return
	end

	?char 0 eq if
		0 return
	end

	"SYNTAX ERRROR\n" prints
	0 return
end

fn consume_all_tokens
	loop
		consume_token not if
			break
		end
	end
end

fn print_tokens
	local token
	local i
	0 !i

	local len
	&tokens get list_used !len

	"TOTAL TOKENS: " prints
	?len printu newline

	loop
		?i ?len ge if
			break
		end

		&tokens get ?i list_get !token
		?i 1 add !i

		 ?token token_get_type NUMBER eq if
			"TOKEN: NUMBER " prints
			?token token_get_value printi
			newline
			continue
		end
		?token token_get_type STRING eq if
			"TOKEN: STRING '" prints
			?token token_get_value prints
			"'" prints
			newline
			continue
		end
		?token token_get_type IDENT eq if
			"TOKEN: IDENT '" prints
			?token token_get_value prints
			"'" prints
			newline
			continue
		end
		?token token_get_type 100 gt if
			"TOKEN: KEYWORD " prints
			?token token_get_value prints
			newline
			continue
		end
		"TOKEN: UNKNOWN " prints newline
	end
end

fn main
	1024 1024 mul global_arena_allocator_start

	&tokens
		token_size list_new
			set

	&input
		0 read_all_to_string
			set
	&length
		&input get strlen
			set
	&index 0 set

	consume_all_tokens

	print_tokens

	global_arena_allocator_end
end
