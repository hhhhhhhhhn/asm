global write
# string: *u8, file_desc: u64 -> byte_written: u64
fn write
	# string file_desc
	1 unrot # 1 string file_desc
	swap # 1 file_desc string
	dup # 1 file_desc string string
	strlen # 1 file_desc string strlen
	syscall
end

global open_file_writing
# filename: *u8 -> file_desc: u64
fn open_file_writing
	2 swap # 2 filename
	577 # O_WRONLY | O_CREAT | O_TRUNC
	0770 # Mode
	syscall
end

global close_file
# file_desc: u64
fn close_file
	3 swap # 3 file_desc
	0 0 # padding args
	syscall
end

# mmap only works if memory amount is a multiple of 4096 (one page),
# so this ensures it
# n: u64 -> rounded: u64
fn round_up_to_page
	dup 0b1111_1111_1111 # n n 0b1111_1111_1111
	band 0 ne # n needs_rounding_up?
	4096 mul # n correction
	swap # correction n
	0xfffffffffffff000 band # correction round(n, 4096)
	add
end

global mmap
# bytes: u64 -> addr: void*
fn mmap
	round_up_to_page # bytes
	9 swap # SYSCALL_MMAP bytes
	0 swap # SYSCALL_MMAP NULL bytes
	3 # PROT_READ | PROT_WRITE
	34 # MAP_PRIVATE | MAP_ANONYMOUS
	-1 # fd (ignored)
	0 # offset (ignored)
	syscall7
end

global munmap
# addr: void*, bytes: u64 -> status
fn munmap
	11 unrot # SYSCALL_MUNMAP addr bytes
	round_up_to_page # SYSCALL_MUNMAP addr bytes_corrected
	0 # Padding
	syscall
end

struct arena
	pointer used cap
end

# capacity -> *allocator
global arena_new
fn arena_new
	local cap local pointer local arena
	!cap
	arena_size ?cap add
		mmap !arena
	?arena arena_size add !pointer

	?arena 0 arena_set_used
	?arena ?cap arena_set_cap
	?arena ?pointer arena_set_pointer

	?arena
end

# *allocator -> void
global arena_destroy
fn arena_destroy
	local total_allocation local arena
	!arena

	 arena_size ?arena arena_get_cap add !total_allocation

	 ?arena ?total_allocation munmap
end

global arena_alloc
# size: u64 -> void*
fn arena_alloc
	local arena local size
	!size !arena

	local arena_left
	?arena arena_get_cap ?arena arena_get_used sub !arena_left
	?size ?arena_left gt
	if
		"Not enough memory for arena allocation" panic
	end

	local result
	?arena arena_get_pointer ?arena arena_get_used add !result

	?arena
		?arena arena_get_used ?size add
			arena_set_used

	?result
end

global panic
# message: char* -> !
fn panic
	"\033[1;31mPANIC: " 2 write pop
	2 write pop
	"\033[0m\n" 2 write pop
	60 1 0 0 syscall
end

global error
fn error
	"\033[1;31mERROR: " 2 write pop
	2 write pop
	"\033[0m\n" 2 write pop
end
